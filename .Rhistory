timeout = 120
)
pagedown::chrome_print(
input = "C:/Users/miked/OneDrive/Documents/GitHub/SIOP2025/poster_clean.html",
output = "C:/Users/miked/OneDrive/Documents/GitHub/SIOP2025/poster.pdf",
timeout = 120
)
pagedown::chrome_print("poster_clean.html")
file.create("C:/Users/miked/OneDrive/Documents/GitHub/SIOP2025/favicon.ico")
pagedown::chrome_print(
input = "C:/Users/miked/OneDrive/Documents/GitHub/SIOP2025/poster.html",
output = "C:/Users/miked/OneDrive/Documents/GitHub/SIOP2025/poster.pdf",
timeout = 120
)
# Install and load necessary libraries
library(tidyverse)
library(papaja)
# Read the data
data <- read.csv('my_tablez.csv')
# Convert title column
data <- data %>% mutate(Title = c("Bissonnette et al. (2019)",
"Chen et al. (2022)",
"Choensawat and Sookhanaphibarn (2019)",
"Gluck et al. (2020)",
"Gutierrez-Maldonado et al. (2010)",
"Hassan et al. (2022)",
"King et al. (2022)",
"King et al. (2022)",
"Le Noury et al. (2021)",
"Li et al. (2020)",
"Li et al. (2020)",
"Lyu et al. (2021)",
"Michalski (2019)",
"Mirchi et al. (2020)",
"Qi et al. (2021)",
"Ropelato et al. (2017)",
"Sadeghi Esfahlani (2020)",
"Sharma (2020)",
"Stanica et al. (2018)",
"Truong (2022)",
"Wang (2021)",
"Winkler-Schwartz et al. (2019)",
"Yilmaz et al. (2022)",
"Zhang and Tsai (2021)",
"Liaw et al. (2023)")
)
# Convert data into a long format
data_long <- gather(data, key = "Question", value = "Response", -Title)
# Extract the numbering from the "Question" column
data_long$Question <- str_extract(data_long$Question, "(?<=X)[0-9]+[a-z]?")
# Assign a numeric value for each response type for color mapping
data_long$Value <- case_when(
data_long$Response == "X" ~ 1,
data_long$Response == "X*" ~ 2,
TRUE ~ 3
)
# Filter na values
data_long <- data_long %>% filter(!is.na(Question))
# Plot the heatmap
ggplot(data_long, aes(x = Question, y = Title, fill = as.factor(Value))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("#e84a3c", "#ffdb58", "white"),
labels = c("Yes", "Borderline Yes", "No"),
name = "Case Type") +
# labs(title = "Heatmap of Responses", x = "Question", y = "Title") +
labs(x = "Research Question", y = "Article") +
theme_apa() +
theme(
plot.background = element_rect(color = "lightgray", fill = NA, size = 1), # Border around plot
panel.background = element_blank(),  # Removes grid background
text = element_text(size = 12, family = "Palatino"), # Set font size and family
axis.title = element_text(size = 22, family = "Palatino"), # Larger axis titles
axis.text = element_text(size = 18, family = "Palatino"), # Axis labels
legend.text = element_text(size = 20, family = "Palatino"), # Legend text
legend.title = element_text(size = 22, family = "Palatino") # Legend title
)
#theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Install and load necessary libraries
library(tidyverse)
library(papaja)
# Read the data
data <- read.csv('my_tablez.csv')
# Convert title column
data <- data %>% mutate(Title = c("Bissonnette et al. (2019)",
"Chen et al. (2022)",
"Choensawat and Sookhanaphibarn (2019)",
"Gluck et al. (2020)",
"Gutierrez-Maldonado et al. (2010)",
"Hassan et al. (2022)",
"King et al. (2022)",
"King et al. (2022)",
"Le Noury et al. (2021)",
"Li et al. (2020)",
"Li et al. (2020)",
"Lyu et al. (2021)",
"Michalski (2019)",
"Mirchi et al. (2020)",
"Qi et al. (2021)",
"Ropelato et al. (2017)",
"Sadeghi Esfahlani (2020)",
"Sharma (2020)",
"Stanica et al. (2018)",
"Truong (2022)",
"Wang (2021)",
"Winkler-Schwartz et al. (2019)",
"Yilmaz et al. (2022)",
"Zhang and Tsai (2021)",
"Liaw et al. (2023)")
)
# Convert data into a long format
data_long <- gather(data, key = "Question", value = "Response", -Title)
# Extract the numbering from the "Question" column
data_long$Question <- str_extract(data_long$Question, "(?<=X)[0-9]+[a-z]?")
# Assign a numeric value for each response type for color mapping
data_long$Value <- case_when(
data_long$Response == "X" ~ 1,
data_long$Response == "X*" ~ 2,
TRUE ~ 3
)
# Filter na values
data_long <- data_long %>% filter(!is.na(Question))
# Plot the heatmap
ggplot(data_long, aes(x = Question, y = Title, fill = as.factor(Value))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("#e84a3c", "#ffdb58", "white"),
labels = c("Yes", "Borderline Yes", "No"),
name = "Case Type") +
# labs(title = "Heatmap of Responses", x = "Question", y = "Title") +
labs(x = "Research Question", y = "Article") +
theme_apa() +
theme(
plot.background = element_rect(color = "lightgray", fill = NA, size = 1), # Border around plot
panel.background = element_blank(),  # Removes grid background
text = element_text(size = 12, family = "Palatino"), # Set font size and family
axis.title = element_text(size = 22, family = "Palatino"), # Larger axis titles
axis.text = element_text(size = 18, family = "Palatino"), # Axis labels
legend.text = element_text(size = 20, family = "Palatino"), # Legend text
legend.title = element_text(size = 22, family = "Palatino") # Legend title
)
#theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library("papaja")
library(tidyverse)
library(knitr)
library(report)
library(rempsyc) # nice apa tables
library(ggtext) # Add bolding for ggplots
r_refs("r-references.bib")
#load("disc_diff.RData")
#load("../../Master's_Data/corr.RData")
#load("../../Master's_Data/df.RData")
demographics <- readxl::read_xlsx("article_demographics.xlsx")
demographics <- demographics %>% mutate(Year = as.character(Year))
nice_table(demographics,
title = c("Table 1", "Characteristics of Included Research Articles"))
bars <- data.frame(results[1])
# Read in CSVs
full_answers <- readxl::read_xlsx("research_questions_processed.xlsx")
gpt_answers <- read.csv("research_questions_23.csv")
# Convert yes and no responses to "x" and " "
# table1 <- ifelse(substr(full_answers, 1, 3) == "Yes", "X", "")
# table1 <- data.frame(full_answers[1], apply(full_answers[2:15], c(1,2), function(x) ifelse(substr(x, 1, 3) == "Yes", "X", "")))
table1 <- data.frame(
full_answers[1],
apply(full_answers[2:15], c(1,2), function(x) {
ifelse(substr(x, 1, 3) == "Yes", "X", ""
)
})
)
# Set the column names of table1 to match those of full_answers
colnames(table1) <- colnames(full_answers)
gpt_table <- data.frame(
gpt_answers[1],
apply(gpt_answers[2:15], c(1,2), function(x) {
ifelse(substr(x, 1, 3) == "Yes" & substr(x, 4, 4) != "*", "X",
ifelse(substr(x, 1, 4) == "Yes*", "X*", "")
)
})
)
# write.csv(gpt_table, "gpt_table.csv")
# write.csv(full_answers, "my_table.csv")
# Function to compute percentage correctness
percentage_correct <- function(col_answer, col_test) {
sum(col_answer == col_test) / length(col_answer) * 100
}
# Compare columns
results <- data.frame(Column = names(table1),
PercentageCorrect = mapply(percentage_correct, table1, gpt_table))
results <- slice(results, -1)
# Remove decimals
results <- results %>% mutate(PercentageCorrect = as.character(PercentageCorrect))
# Rename percentage_correct column
results <- results %>% rename(`Percent Agreement` = PercentageCorrect)
# Print results
print(results)
nice_table(results,
title = c("Table 2", "Percent Agreement Between ChatGPT and the Researcher on Binary Yes / No Responses"),
note = c("This table does not account for borderline cases."))
bars <- data.frame(results[1])
bars <- bars %>% mutate(
No = "",
`Borderline Yes` = "",
Yes = ""
) %>%
rename(
Question = Column
)
write.csv(bars, "bars.csv", row.names = FALSE)
bars_final <- read.csv("bars_final.csv")
bars_final <- bars_final %>% rename(`Borderline Yes` = Borderline.Yes)
nice_table(bars_final,
title = c("Table 3", "Anchored Ratings for Each Research Question"),
note = c("Research subquestions are denoted with a letter (1a, 1b...)", "Suggestions come from a combination of Salas (2012)'s recommendations and the inductive approach outlined in the Methods section."))
# THIS SECTION IS DEACTIVATED, TO REACTIVE TABLE, UNCOMMENT THE NICE_TABLE CODE AT THE BOTTOM OF THE BLOCK
# Read in CSV
full_answers <- readxl::read_xlsx("research_questions_processed.xlsx")
# Convert yes and no responses to "x" and " "
# table1 <- ifelse(substr(full_answers, 1, 3) == "Yes", "X", "")
# table1 <- data.frame(full_answers[1], apply(full_answers[2:15], c(1,2), function(x) ifelse(substr(x, 1, 3) == "Yes", "X", "")))
table2 <- data.frame(
full_answers[1],
apply(full_answers[2:15], c(1,2), function(x) {
ifelse(substr(x, 1, 3) == "Yes" & substr(x, 4, 4) != "*", "X",
ifelse(substr(x, 1, 4) == "Yes*", "X*", "")
)
})
)
# Set the column names of table1 to match those of full_answers
colnames(table2) <- colnames(full_answers)
# write.csv(table2, "my_tablez.csv")
# Chance title column
table2 <- table2 %>% mutate(Title = c("Bissonnette et al. (2019)",
"Chen et al. (2022)",
"Choensawat and Sookhanaphibarn (2019)",
"Gluck et al. (2020)",
"Gutierrez-Maldonado et al. (2010)",
"Hassan et al. (2022)",
"King et al. (2022)",
"King et al. (2022)",
"Le Noury et al. (2021)",
"Li et al. (2020)",
"Li et al. (2020)",
"Lyu et al. (2021)",
"Michalski (2019)",
"Mirchi et al. (2020)",
"Qi et al. (2021)",
"Ropelato et al. (2017)",
"Sadeghi Esfahlani (2020)",
"Sharma (2020)",
"Stanica et al. (2018)",
"Truong (2022)",
"Wang (2021)",
"Winkler-Schwartz et al. (2019)",
"Yilmaz et al. (2022)",
"Zhang and Tsai (2021)",
"Liaw et al. (2023)")
)
# Rename columns to shorten them
table2 <- table2 %>%
rename(
Title = "Title",
`1a. Learning Objectives` = "1a. Are learning objectives created and clarified to the reader?",
`1b. Self-efficacy` = "1b. Is the training delivered in a way that builds trainees' belief in their ability to learn and display trained skills (self-efficacy)?",
`1c. Learning Orientation` = "1c. Does the training encourage trainees to participate in training to learn rather than to appear capable (promotes a learning orientation)?",
`1d. Engagement` = "1d. Does the training engage trainees and build their interest?",
`1e. Training Design` = "1e. Does the training utilize a valid training strategy and design? This involves providing information, giving demonstrations of good and bad behaviors, allowing opportunities to practice, and providing meaningful feedback.",
`1f. Cognitive Processes` = "1f. Does the training allow trainees to use the same cognitive processes that they will have to in the environment this learning should transfer to?",
`1g. Attention & Progress` = "1g. Does the training keep trainees' attention by allowing trainees to monitor their progress toward goals?",
`1h. Error Encouragement` = "1h. Does the training encourage trainees to make errors?",
`1i. Training Structure` = "1i. Does the training provide sufficient structure to trainees when allowing them to make decisions about their learning experience?",
`1j. Psychological Fidelity` = "1j. Does the training simulation increase psychological fidelity (e.g. job-relevant, technology used fits the task)?",
`1k. Outcome Taxonomies` = "1k. Does the training use established learning / outcome taxonomies (e.g. affective, cognitive, and/or behavioral indicators)?",
`2. Control Group` = "2. Are current studies on AI-enhanced VR training programs utilizing a proper control group?",
`3. Sample Size` = "3. Do current studies on AI-enhanced VR training programs have a sufficient number of people to make inferences about their effectiveness?",
`4. Preliminary Findings` = "4. What are the preliminary findings: Does adding AI to VR training result in a better experience for the trainee, greater learning, or better on the job performance than regular VR training?"
)
# Extract the current column names
col_names <- colnames(table2)
# Apply the regex pattern to the column names (except the first one)
col_names[-1] <- str_extract(col_names[-1], "[0-9]+[a-z]?")
# Assign the modified column names back to the dataframe
names(table2) <- col_names
# Create APA table
#nice_table(table2,
#          title = c("Table 4", "Table Containing Best Practice Results for each Research Article"),
#         note = c("X = Yes", "X* = Borderline case", "Empty cells signifiy a negative response.")
#        )
# THIS SECTION IS DEACTIVATED, TO REACTIVE TABLE, UNCOMMENT THE NICE_TABLE CODE AT THE BOTTOM OF THE BLOCK
# Read in CSV
full_answers <- readxl::read_xlsx("research_questions_processed.xlsx")
# Convert yes and no responses to "x" and " "
# table1 <- ifelse(substr(full_answers, 1, 3) == "Yes", "X", "")
# table1 <- data.frame(full_answers[1], apply(full_answers[2:15], c(1,2), function(x) ifelse(substr(x, 1, 3) == "Yes", "X", "")))
table2 <- data.frame(
full_answers[1],
apply(full_answers[2:15], c(1,2), function(x) {
ifelse(substr(x, 1, 3) == "Yes" & substr(x, 4, 4) != "*", "X",
ifelse(substr(x, 1, 4) == "Yes*", "X*", "")
)
})
)
# Set the column names of table1 to match those of full_answers
colnames(table2) <- colnames(full_answers)
# write.csv(table2, "my_tablez.csv")
# Chance title column
table2 <- table2 %>% mutate(Title = c("Bissonnette et al. (2019)",
"Chen et al. (2022)",
"Choensawat and Sookhanaphibarn (2019)",
"Gluck et al. (2020)",
"Gutierrez-Maldonado et al. (2010)",
"Hassan et al. (2022)",
"King et al. (2022)",
"King et al. (2022)",
"Le Noury et al. (2021)",
"Li et al. (2020)",
"Li et al. (2020)",
"Lyu et al. (2021)",
"Michalski (2019)",
"Mirchi et al. (2020)",
"Qi et al. (2021)",
"Ropelato et al. (2017)",
"Sadeghi Esfahlani (2020)",
"Sharma (2020)",
"Stanica et al. (2018)",
"Truong (2022)",
"Wang (2021)",
"Winkler-Schwartz et al. (2019)",
"Yilmaz et al. (2022)",
"Zhang and Tsai (2021)",
"Liaw et al. (2023)")
)
# Rename columns to shorten them
table2 <- table2 %>%
rename(
Title = "Title",
`1a. Learning Objectives` = "1a. Are learning objectives created and clarified to the reader?",
`1b. Self-efficacy` = "1b. Is the training delivered in a way that builds trainees' belief in their ability to learn and display trained skills (self-efficacy)?",
`1c. Learning Orientation` = "1c. Does the training encourage trainees to participate in training to learn rather than to appear capable (promotes a learning orientation)?",
`1d. Engagement` = "1d. Does the training engage trainees and build their interest?",
`1e. Training Design` = "1e. Does the training utilize a valid training strategy and design? This involves providing information, giving demonstrations of good and bad behaviors, allowing opportunities to practice, and providing meaningful feedback.",
`1f. Cognitive Processes` = "1f. Does the training allow trainees to use the same cognitive processes that they will have to in the environment this learning should transfer to?",
`1g. Attention & Progress` = "1g. Does the training keep trainees' attention by allowing trainees to monitor their progress toward goals?",
`1h. Error Encouragement` = "1h. Does the training encourage trainees to make errors?",
`1i. Training Structure` = "1i. Does the training provide sufficient structure to trainees when allowing them to make decisions about their learning experience?",
`1j. Psychological Fidelity` = "1j. Does the training simulation increase psychological fidelity (e.g. job-relevant, technology used fits the task)?",
`1k. Outcome Taxonomies` = "1k. Does the training use established learning / outcome taxonomies (e.g. affective, cognitive, and/or behavioral indicators)?",
`2. Control Group` = "2. Are current studies on AI-enhanced VR training programs utilizing a proper control group?",
`3. Sample Size` = "3. Do current studies on AI-enhanced VR training programs have a sufficient number of people to make inferences about their effectiveness?",
`4. Preliminary Findings` = "4. What are the preliminary findings: Does adding AI to VR training result in a better experience for the trainee, greater learning, or better on the job performance than regular VR training?"
)
# Extract the current column names
col_names <- colnames(table2)
# Apply the regex pattern to the column names (except the first one)
col_names[-1] <- str_extract(col_names[-1], "[0-9]+[a-z]?")
# Assign the modified column names back to the dataframe
names(table2) <- col_names
# Create APA table
#nice_table(table2,
#          title = c("Table 4", "Table Containing Best Practice Results for each Research Article"),
#         note = c("X = Yes", "X* = Borderline case", "Empty cells signifiy a negative response.")
#        )
# First, install and load necessary libraries
library(tidyverse)
# Read the data
data <- read.csv('my_tablez.csv')
# Drop the title column
data <- data[,-2]
# Convert data into a long format for easier plotting
data_long <- gather(data, key = "Question", value = "Response", -1)
# Extract just the numbering from the "Question" column
data_long$Question <- str_extract(data_long$Question, "(?<=X)[0-9]+[a-z]?")
# Count the occurrences of each response for each question
response_counts <- data_long %>%
group_by(Question, Response) %>%
summarise(Count = n()) #%>%
#filter(!is.na(Response))
# Only use this code if the filter code above is commented out. This code is to make RQ 2 appear
response_counts[30, 2] <- ""
# Convert responses to "Yes", "Borderline Yes", and "No"
response_counts$Response <- ifelse(response_counts$Response == "X", "Yes", ifelse(response_counts$Response == "X*", "Borderline Yes", "No"))
# Add a factor level for blank responses
response_counts$Response <- factor(response_counts$Response, levels = c("Yes", "Borderline Yes", "No"))
# Create the stacked bar graph
ggplot(response_counts, aes(x = Question, y = Count, fill = fct_rev(Response))) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Responses by Question", y = "Number of Responses", x = "Questions") +
# theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_apa() +
labs(
title = "Stacked Bargraph with Affirmative, Borderline, and Negative Cases for Each Research Question",
y = "Number of Articles",
x = "Research Question",
fill = "Case Type"
)
ggplot(response_counts, aes(x = Question, y = Count, fill = fct_rev(Response))) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "<b>Figure 3</b><br><i>Stacked Bargraph with Affirmative, Borderline, and Negative Cases for Each Research Question<i>",
y = "Number of articles",
x = "Research question",
fill = "Case type",
caption = "<i>Note</i>: A stacked bargraph showing affirmative (Yes), borderline (Borderline Yes),
and negative (no) cases for each research question. The stacked bars do not overlap."
) +
theme_apa() +
theme(
#    axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_markdown(),
plot.caption =   element_text(hjust = 0) # Adjust top margin to move caption further down
)
ggplot(response_counts, aes(x = Question, y = Count, fill = fct_rev(Response))) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Figure 3\nStacked Bargraph with Affirmative, Borderline, and Negative Cases for Each Research Question",
y = "Number of articles",
x = "Research question",
fill = "Case type",
caption = "Note: Add your footnote here."
) +
theme_apa() +
theme(
plot.title = element_text(hjust = 0),  # Left-align the title
plot.caption = element_text(hjust = 0, face = "italic")  # Left-align and italicize the caption
)
library(knitr)
library(kableExtra)
library(readxl)
knitr::opts_chunk$set(fig.cap = NULL)
# Load data
future_research_guidelines <- read_xlsx("future_research_guidelines.xlsx")
# Create styled table
kable(
future_research_guidelines,
format = "html", # Ensure compatibility with posterdown_html
caption = "Table 5: Guidelines for Future AI-VR Training Research and Adherence to Best Practices."
) %>%
kable_styling(
font_size = 30, # Increase text size
bootstrap_options = c("striped", "hover"), # Optional styling
full_width = FALSE, # Keeps table compact
position = "center" # Centers the table
) %>%
footnote(
general = "This table highlights guidelines for achieving each of the training best practices suggested by Salas (2012)."
)
library(knitr)
library(kableExtra)
library(readxl)
knitr::opts_chunk$set(fig.cap = NULL)
# Load data
future_research_guidelines <- read_xlsx("future_research_guidelines.xlsx")
# Create styled table
kable(
future_research_guidelines,
format = "html", # Ensure compatibility with posterdown_html
caption = "Table 5: Guidelines for Future AI-VR Training Research and Adherence to Best Practices."
) %>%
kable_styling(
font_size = 30, # Increase text size
bootstrap_options = c("striped", "hover"), # Optional styling
full_width = FALSE, # Keeps table compact
position = "center" # Centers the table
) %>%
footnote(
general = "This table highlights guidelines for achieving each of the training best practices suggested by Salas (2012)."
)
library(knitr)
library(kableExtra)
library(readxl)
knitr::opts_chunk$set(fig.cap = NULL)
# Load data
future_research_guidelines <- read_xlsx("future_research_guidelines.xlsx")
# Create styled table
kable(
future_research_guidelines,
format = "html", # Ensure compatibility with posterdown_html
caption = "Table 5: Guidelines for Future AI-VR Training Research and Adherence to Best Practices."
) %>%
kable_styling(
font_size = 30, # Increase text size
bootstrap_options = c("striped", "hover"), # Optional styling
full_width = FALSE, # Keeps table compact
position = "center" # Centers the table
) %>%
footnote(
general = "This table highlights guidelines for achieving each of the training best practices suggested by Salas (2012)."
)
table_5 <- read_csv("table_5_sample.csv")
nice_table(table_5,
title = c("Table 5",
"Sample Sizes, Comparison Groups, and Proposal Status of Each Study"),
note = "* represents samples that came from a power analysis."
)
future_research_guidelines <- readxl::read_xlsx("future_research_guidelines.xlsx")
nice_table(future_research_guidelines,
title = c("Table 6",
"Guidelines for Future AI-VR Training Research and Adherence to Best Practices"),
note = "This table highlights guidelines for achieveing each of the training best practices suggested by Salas (2012)."
)
future_research_guidelines <- readxl::read_xlsx("../poster/images/future_research_guidelines.xlsx")
future_research_guidelines <- readxl::read_xlsx("../poster/Figures/future_research_guidelines.xlsx")
future_research_guidelines <- readxl::read_xlsx("../poster/future_research_guidelines.xlsx")
nice_table(future_research_guidelines,
title = c("Table 6",
"Guidelines for Future AI-VR Training Research and Adherence to Best Practices"),
note = "This table highlights guidelines for achieveing each of the training best practices suggested by Salas (2012)."
)
future_research_guidelines <- readxl::read_xlsx("../poster/future_research_guidelines.xlsx")
nice_table(future_research_guidelines,
title = c("Table",
"Guidelines for Future AI-VR Training Research and Adherence to Best Practices"),
note = "This table highlights guidelines for achieveing each of the training best practices suggested by Salas (2012)."
)
